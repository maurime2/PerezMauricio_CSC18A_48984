 Mauricio S. Perez
   CSC18a - 48984
   Proffesor Paul J. Conrad
   
   
   Assignment 5, PART 1: Problem 18.12 (What does the following program do?)
 
   Problem:  We are given the following code and asked what it dose:
             (Lines 10 - 32 are code from the book.)

    // Exercise 18.12 Solution: MysteryClass.java
    public class MysteryClass
    {
            public static int mystery(int[] array2, int size){

                    if (size == 1)
                            return array2[0];

                    else
                            return array2[size - 1] + mystery(array2, size - 1);
            }

                     public static void main(String[] args){

                             int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

                             int result = mystery(array, array.length);

                             System.out.printf("Result is: %d%n", result);

                     } // end method main

    } // end class MysteryClass
 
    I can say with great resolve, that the following code creates an array of 
    integers [1-10] named "array", and a method that calls itself recursively
    called "mystery", which adds all of the elements into an integer named 
    "result.

    The program then ends by displaying said result. In the case of integers 
    1-10, said result is 55.

    Within the "mystery" method, I have created two blocks of code whitch 
    prompt what is going on within the "if" and "else" section of the method.
    You can delete the "star slashes" to revele the workings of the method.
    
    !!!UPDATE!!!
    I HAVE COMMENTED OUT THE STAR SLASH TO DISPLAY THE WORKINGS OF THE METHOD.
	
	Assignment 5, PART 2: Problem 18.13 (What does the following program do?)
 
	Problem:  We are given the following code and asked what it dose:
             (Lines 10 - 26 are code from the book.)

            // Exercise 18.13 Solution: SomeClass.java
            public class SomeClass{
                    public static String someMethod(int[] array2, int x){
                             if (x < array2.length)
                                    return String.format(
                                    "%s%d ", someMethod(array2, x + 1), array2[x]);
                            else
                                    return "";
                    }

                    public static void main(String[] args){
                     int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
                     String results = someMethod(array, 0);
                     System.out.println(results);
                    }

            } // end class SomeClass
 
    I can say with great resolve, that the following code creates an array of
    integers [1-10] named "array", and a method that calls itself recursively
    called "someMethod", which adds all of the elements into a string named
    "results" in avending order. Pretty much stores "array" into "results" in
    reverse order.

    First, the array is declared with values (1-10). Then the array is called,
    along with a 0, by a method "someMethod" to be stored in a string named
    "result". The zero will represent the location of elements of the array.

    Method "someMethod" calls itself recursively, so long as the second value
    passed, dose not excede the size of the array. If this is true, it will
    call the method "someMethod" again, with the entiere array, and the next
    value of the element in the array passed. It also returns the curent
	element referenced by x. Initialy it is zero, so in the case of
	array[1-10], the element would be 1.

    This is where it can get confusing: because the if statement returns both
    the method and a value in the array, one must pay attention to the order
	it is done. This order of returning the method first, and then the value,
	is the cause of why the elements of array "array" will returned in reverse
    order once the final return is executed. What once read 
    "1 2 3 4 5 6 7 8 9 10" , will now be stored as a string as 
    "10 9 8 7 6 5 4 3 2 1". And this is all because of the order it was
    returned within the if statement.

    Thus when the x is 10, or larger than the bounds of the array length, the
    else portion of the method will be executed, and reuturn nothing, thus only
    returning all of the previous values (10 9 8 7 6 5 4 3 2 1).

    Within "someMethod", i created prompts that show what the array location
	and array value are at the time of the "if" and "else" statement is 
	executed. uncoment the "star slash" to see the results

    !!!UPDATE!!!
    I HAVE COMMENTED OUT THE STAR SLASH TO DISPLAY THE WORKINGS OF THE METHOD.
	
	What I Learned:
	
	I would say that the second assignment taught me the most. Calling the
	elements of the array in reverse order is something i would have never
	thought about. It was a simple, yet not confusing way that allowed me to
	see this method devolve.