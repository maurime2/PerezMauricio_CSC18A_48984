 Mauricio S. Perez
   CSC18a - 48984
   Proffesor Paul J. Conrad
   
   
   Assignment 6: Problem 18.14 (Palindromes)
 
   Problem:  	A palindrome is a string that is spelled the same way forward
				and backward. Some examples of palindromes are “radar,”
				“able was i ere i saw elba” and 
				(if spaces are ignored) “a man a plan a canal panama.”
			
					Write a recursive method "testPalindrome".
						- "testPalindrome" returns boolean value true if the
						  string stored in the array is a palindrome.
						- false otherwise. 

					The method should ignore:
						- spaces.
						- punctuation.

	Code:
	package palindromes;
	//Utility Scanner
	import java.util.Scanner; 

	//Class Palindromes
	public class Palindromes {

		//Main
		public static void main(String[] args) {
			// create a Scanner object to obtain input from the command window
			Scanner input = new Scanner(System.in);   
			
			//Declare Variables
			String Original= "";       // Original String
			String Copy = "";          // Copy String
			String Reverse = "";      // Palendrome
			int Length = 0;     // Length of Manipulated String
			int End = 0;       //Last Element of Manipulated String
			boolean dummy = false;
					
			//Enter a String
			System.out.print("Please Enter a Palendrome: ");
			Original = input.nextLine(); // read a line of text
			Copy = Original;
			System.out.println("Your Original Input is   : "+Copy);
			
			//Prepare String Array to be manipulated
			Copy = Copy.replaceAll("\\s+","");          //Removes All Spaces.
			Copy = Copy.toLowerCase();                  //Converts All to Lowercase.
			Copy = Copy.replaceAll("[^0-9a-zA-Z ]", "");//Removes All Punctuation.
			System.out.println("Fixed String             : "+Copy);
			
			//Manupulate Copy to be reversed
			Length = Copy.length();                         //Length
			System.out.printf("String Length is: %d",Length);
			End = (Copy.length())-1;                        //End Element
			System.out.printf("\nLast Element @  : %d",End);
				//Reverse String
				for(int i=0;i<Length;i++){
					Reverse += Copy.charAt(End);
					End--;
					// System.out.printf("\nInstance   : %d",i); //Test Instance.
				}
			System.out.println("\nString in Reverse Order  : "+Reverse);
			
			//testPalindrome Method Called: TEST FOR PALENDROME
			End = (Copy.length())-1;                        //End Element
			dummy = (testPalindrome(Copy,Reverse, End, Length));
			
			//Re Afirm Results in main.
			if(dummy==true){
			System.out.println(Original+" , without spaces or punctuation, "
					+ "is a Palendrome!!!");
			}
			else{
			System.out.println(Original+" , is not a Palendrome, even without "
					+ "spaces or punctuation ");
			}
			
			
		}//End Main
		
		//Classes
		public static boolean testPalindrome
			( String COPY, String REVERSE, int END, int LENGTH){
			boolean pal = false;

			//Test Palendrome
			for(int i=0;i<LENGTH;i++){
					if(COPY.charAt(END) == REVERSE.charAt(END)){
						END--;
						i++;
					}
					if(COPY.charAt(END) != REVERSE.charAt(END)){
						System.out.println("This is not a Palindrome...");
						//System.out.print("The Input is not a Palendrome!!!");
						pal = false;
						return pal;
					}
				
				}
			//It is a palendrome
			System.out.print("YOU HAVE ENTERED A PALENDROME!!! CONGRATS!!!\n");
			pal = true;
			return pal; 
		}//End Method testPalindrome
		
	}//End Class Palindromes
	
	In this problem, we had to manipulate strings in such a way that we could
	test if the string the user inputed, would result in a palendrome.
	
	This feat was achived with a few cleaver uses of the built in charAt 
	methods. After the user inputs literaly anything his heart desieres at the
	command prompt, we then procide to copy the "Original" string into a "Copy"
	so as to not change the original user input.
	
	We then Procide to manipulate the "Copy", by removing all spaces, 
	lowercasing all letters, and removing all punctuations, only leaving 
	lowercases letters,	and numbers.
	
	By taking the length of the new "Copy" array, We can ensure to always know
	the end element of "Copy". We will use the variables "Length" and "Copy"
	to reference the last elements in the strings we desire to manupulate or
	inspect.
	
	Before we test the palandrome, I created a string "Reverse", whos sole 
	purpose is to copy the stript string "Copy", and store it in litteral 
	reverse order. By the end of copying into "Reverse", "Copy" and "Reverse"
	will have the same number of elements, the same total length, and the same
	elements, only "Reverse" will have "Copy"'s elements in reverse order.
	
	Once all strings are set, we pass them into a boolean methods called
	"testPalindrome", which sole purpose is to test if the "Copy" and 
	"Reverse" strings are palandromes. By checking each element, we should
	know whether or not the input by the user is a palendrome. If it is, it 
	returns a "true" back into main, if it is not, it returns a false into main.
	
	Back in main, we make a final statment to the user. If he passed a palendrome,
	he gets his original string printed, with a statement re-affirning it is a
	palendrome. If it is false, the user still sees the original prompt,
	but this time with a statement saying they did not input a palendrome.
	
	What I Learned:
					In this problem, I learned that I can manupulate a string, 
					almost as well as an array. The two are not that far appart,
					only when displaying values vs ascii characters will it be 
					problimatic. But the nice thing is that Strings have all 
					theise littl pre built features that help you manipulate or 
					modify them, as opposed to having to create loops to replace
					each element, one at a time in an Array. I think with strings,
					the task of fixing the data to look or be stored a certain way
					can be a little faster, due to theise built in features. It will
					take a bit more work to learn all of them, and to use them 
					efficiantly. I dont think the code i wrote was too efficient, 
					rather than simply bruit force to the solution. I requiere more
					practice.
					